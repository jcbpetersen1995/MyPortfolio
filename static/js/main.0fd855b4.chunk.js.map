{"version":3,"sources":["components/Navbar.js","components/ArrowButton.js","components/Welcome.js","components/BlockOne.js","components/BlockTwo.js","components/BlockThree.js","components/Moment.js","components/HomePage.js","App.js","serviceWorker.js","index.js","images/JP.logo.tiny.png","images/JacobPetersen_r1_DEN_3082.jpg"],"names":["Navbar","className","src","logo","alt","ArrowButton","Icon","name","size","color","Welcome","BlockOne","profilePicture","BlockTwo","BlockThree","MomentJs","HomePage","Component","App","exact","path","process","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"oQAceA,MATf,WACI,OACI,6BAASC,UAAU,UACf,yBAAKC,IAAKC,IAAMC,IAAI,UAAUH,UAAU,SACxC,wBAAIA,UAAU,eAAd,+B,SCCGI,MANf,WACI,OACI,kBAACC,EAAA,EAAD,CAAMC,KAAK,eAAeC,KAAK,OAAOC,MAAM,SAASR,UAAU,eCYxDS,MAdf,WACE,OACE,iCACE,yBAAKT,UAAU,gBACb,wBAAIA,UAAU,WAAd,WACA,uBAAGA,UAAU,kBAAb,QACO,0BAAMA,UAAU,eAAhB,kBADP,gBAGA,kBAAC,EAAD,S,iBCWOU,MAlBf,WACE,OACE,6BAASV,UAAU,YACjB,wBAAIA,UAAU,UAAd,iBACA,yBAAKC,IAAKU,IAAgBX,UAAU,eAAeG,IAAI,oBACvD,uBAAGH,UAAU,aAAb,obCOSY,MAff,WACE,OACE,6BAASZ,UAAU,YACjB,wBAAIA,UAAU,eAAd,YACA,uBAAGA,UAAU,WAAb,iVCsBSa,MA1Bf,WACE,OACE,6BAASb,UAAU,cACjB,wBAAIA,UAAU,oBAAd,UACA,uBAAGA,UAAU,cAAb,wZAQA,wBAAIA,UAAU,cACV,qCACA,4CACA,gEACA,8DACA,yCACA,qDACA,4DACA,6D,aCdKc,ICsBAC,E,oNAdX,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAZeC,aCIRC,MATf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAMC,gBAA8BC,UAAWN,MCG9CO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,uD","file":"static/js/main.0fd855b4.chunk.js","sourcesContent":["import React from 'react';\nimport '../css/app.css';\nimport logo from '../images/JP.logo.tiny.png';\n\n\nfunction Navbar() {\n    return (\n        <section className=\"navbar\">\n            <img src={logo} alt=\"JP Logo\" className=\"logo\"/>\n            <h1 className=\"contactInfo\">CONTACT ME ~ 951-227-6991</h1>\n        </section>\n    )\n};\n\nexport default Navbar;","import React from 'react';\nimport '../css/app.css';\nimport {Icon} from 'semantic-ui-react';\n\nfunction ArrowButton() {\n    return (\n        <Icon name='chevron down' size=\"huge\" color=\"yellow\" className=\"arrowDown\" />\n    )\n};\n\nexport default ArrowButton;","import React from \"react\";\nimport \"../css/app.css\";\nimport ArrowButton from './ArrowButton';\n\nfunction Welcome() {\n  return (\n    <section>\n      <div className=\"welcomeBlock\">\n        <h1 className=\"welcome\">WELCOME</h1>\n        <p className=\"monochromeText\">\n          TO A <span className=\"rainbowText\">MULTICHROMATIC</span> EXPERIENCE.\n        </p>\n        <ArrowButton />\n      </div>\n    </section>\n  );\n}\n\nexport default Welcome;\n","import React from \"react\";\nimport \"../css/app.css\";\nimport logo from '../images/JP.logo.tiny.png';\nimport profilePicture from '../images/JacobPetersen_r1_DEN_3082.jpg';\n\nfunction BlockOne() {\n  return (\n    <section className=\"blockOne\">\n      <h1 className=\"myName\">JAKE PETERSEN</h1>\n      <img src={profilePicture} className=\"profilePhoto\" alt=\"profile picture\" />\n      <p className=\"introText\">\n        My name is Jake and I'm a full-stack web developer for Bluejestic Inc. I\n        enjoy the the creative aspect of coding and creating beautiful user\n        interfaces. With mainly high-line automotive industry and customer\n        service backgrounds, I am looking to move my career focus towards web\n        and app development. I've attended a 24-week, intensive full-stack web\n        development bootcamp, as well as taught myself Swift, Wordpress, and\n        some Python.\n      </p>\n    </section>\n  );\n}\n\nexport default BlockOne;\n","import React from \"react\";\n\nfunction BlockTwo() {\n  return (\n    <section className=\"blockTwo\">\n      <h1 className=\"aboutMeText\">ABOUT ME</h1>\n      <p className=\"aboutMe\">\n        I currently live in the Denver Metro area. I was born in sunny Southern\n        California. In my spare time, I enjoy working on personal coding\n        projects and going on long-distance runs. I also enjoy visiting the\n        Disney theme parks on both ends of the country when I can. Web\n        development is an exciting way for me to express my creativity.\n      </p>\n    </section>\n  );\n}\n\nexport default BlockTwo;\n","import React from \"react\";\n\nfunction BlockThree() {\n  return (\n    <section className=\"blockThree\">\n      <h1 className=\"careerHeaderText\">CAREER</h1>\n      <p className=\"careerText\">\n        Since having my first job back in 2013, I have held many different\n        positions that have given me skills to use in any field. I have been\n        everything from a barista at Starbucks, to a shift manager, to a service\n        advisor at Mercedes-Benz. I am now ready to pursue a career in\n        full-stack web and app development. During my coding bootcamp, I learned\n        many invaluable web development skills. I am proficient in:\n      </p>\n      <ul className=\"skillsList\">\n          <li>React</li>\n          <li>HTML5 / CSS3</li>\n          <li>Bootstrap / UI Kit / Materialize</li>\n          <li>Javascript / Node.js / Express</li>\n          <li>Wordpress</li>\n          <li>MySQL / MongoDB / API</li>\n          <li>Swift / Python (IN PROGRESS)</li>\n          <li>Full-Stack Web Development</li>\n      </ul>\n    </section>\n  );\n}\n\nexport default BlockThree;\n","import React from \"react\";\nimport Moment from \"react-moment\";\nimport \"moment-timezone\";\n\nfunction MomentJs() {\n  return <Moment className=\"welcomeDate\" format=\"D MMM YYYY\"></Moment>;\n}\n\nexport default MomentJs;\n","import React, { Component } from 'react';\nimport Navbar from './Navbar';\nimport Welcome from './Welcome';\nimport BlockOne from './BlockOne';\nimport BlockTwo from './BlockTwo';\nimport BlockThree from './BlockThree';\nimport BlockFour from './BlockFour';\nimport MomentJs from './Moment';\nimport ArrowButton from './ArrowButton';\n\n\nclass HomePage extends Component {\n  componentDidMount() {\n\n  }\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <Welcome />\n        {/* <MomentJs /> */}\n        <BlockOne />\n        <BlockTwo />\n        <BlockThree />\n        {/* <BlockFour /> */}\n      </div>\n    );\n  }\n}\n\nexport default HomePage;\n","import React from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './css/app.css';\nimport HomePage from './components/HomePage';\n\nfunction App() {\n  return (\n    <Router>\n      <Route exact path={process.env.PUBLIC_URL + \"/\"} component={HomePage}\n      />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/JP.logo.tiny.92fd6daa.png\";","module.exports = __webpack_public_path__ + \"static/media/JacobPetersen_r1_DEN_3082.51507982.jpg\";"],"sourceRoot":""}